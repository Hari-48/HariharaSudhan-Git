1. @Controller
Indicates a Spring component that serves as a web controller to handle HTTP requests and map them to appropriate methods. Used in MVC architecture.

2. @RequestMapping
Defines the URL path and HTTP methods for handling requests at the class or method level.

3. @ResponseBody
Specifies that the return value of a method is written directly to the HTTP response body, rather than rendering a view.

4. @RestController
A combination of @Controller and @ResponseBody that simplifies creating RESTful web services by directly returning data.

5. @PostMapping
Handles HTTP POST requests, typically used to save or create new resources.

6. @PutMapping
Handles HTTP PUT requests, used to update existing resources.

7. @GetMapping
Handles HTTP GET requests, used to retrieve data from the server.

8. @DeleteMapping
Handles HTTP DELETE requests, used to delete resources.

9. @RequestParam
Binds HTTP request parameters to method parameters.

10. @PathVariable
Binds URI template variables to method parameters.

11. @RequestBody
Maps the HTTP request body to a method parameter, typically used to handle JSON or XML payloads.

12. @Service
Indicates a service component that contains business logic and is managed by the Spring container.

13. @Repository
Specifies a Data Access Object (DAO) component that interacts with the database.

14. @Component
A generic annotation for any Spring-managed bean that does not fall into the specific roles of @Controller, @Service, or @Repository.

15. @Autowired
Enables dependency injection by automatically wiring Spring-managed beans into other components.






